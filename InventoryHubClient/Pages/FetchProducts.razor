@page "/fetchproducts"

@inject HttpClient HttpClient

<div class="container mt-5">
    <h3 class="text-center mb-4">Product List</h3>

    <div class="row">
        @if (products != null)
        {
            foreach (var product in products)
            {
                <div class="col-md-4 mb-3">
                    <div class="card h-100 border-info shadow-sm transition">
                        <div class="card-body">
                            <h5 class="card-title">@product.Name</h5>
                            <p class="card-text">$@product.Price</p>
                            <p class="card-text">In Stock: @product.Stock</p>
                        </div>
                    </div>
                </div>
            }
        }
        else if (errorMessage != null)
        {
            <div class="alert alert-danger w-100 text-center" role="alert">
                @errorMessage
            </div>
        }
        else
        {
            <div class="col-12 text-center">
                <div class="spinner-border text-info" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .transition {
        transition: transform 0.3s ease-in-out;
    }

    .transition:hover {
        transform: scale(1.05);
    }
</style>

@code {
    private Product[]? products;
    private string? errorMessage;
    private const int TimeoutInSeconds = 30;

    protected override async Task OnInitializedAsync()
    {
        await FetchProductsAsync();
    }

    private async Task FetchProductsAsync()
    {
        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(TimeoutInSeconds));
            products = await HttpClient.GetFromJsonAsync<Product[]>("/api/products", cts.Token);
        }
        catch (OperationCanceledException)
        {
            errorMessage = "The request timed out. Please try again.";
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"An error occurred while fetching products: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }

    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public double Price { get; set; }
        public int Stock { get; set; }
    }
}
